{{#> layouts/base title="Prefix vs postfix increment unary operators" }}

  {{#*inline "hero-block"}}
    {{> includes/hero
      hero-src="/stop.jpg"
      hero-alt="Careful now"
    }}
  {{/inline}}

  {{#*inline "body-block"}}
    <div class="container">
      <div class="section">

<p>The increment & decrement operators will be recognisable to anyone with some experience programming JavaScript. They are taken straight from C and are simple in concept.</p>
<figure>
<div class="panel panel-code">
<div class="panel-heading">JavaScript</div>
<pre>
<code class="language-javascript">
var num = 10;
num++;
console.log(num);
</code>
<output>11</output>
</pre>
</div>
<figcaption>Demonstration of the unary increment postfix operator increasing the value of a number variable by 1</figcaption>
</figure>
<p>
The above postfix is widely known and you will see it's all over the place. It's prefix cousin is less commonly used, and whilst being very similar, has one important distinction. Observe the following examples, the first using the postfix operator & the second using the prefix operator.
</p>
<div class="row">
<div class="col-md-6">
<figure>
<div class="panel panel-code">
<div class="panel-heading">JavaScript</div>
<pre>
<code class="language-javascript">
var num1 = 10;
var num2 = num1++;
console.log(num2);
</code>
<output>10</output>
</pre>
</div>
<figcaption>The variable assignment of num2 happens before the unary operation on num1</figcaption>
</figure>
</div>
<div class="col-md-6">
<figure>
<div class="panel panel-code">
<div class="panel-heading">JavaScript</div>
<pre>
<code class="language-javascript">
var num1 = 10;
var num2 = ++num1;
console.log(num2);
</code>
<output>11</output>
</pre>
</div>
<figcaption>The unary operation on num1 happens before the variable assignment of num2</figcaption>
</figure>
</div>
</div>
<p>
The prefix operator ensures that it is the first operation to occur in the statement while the postfix operator waits until the whole statement has been evaluated before acting.
</p>


      </div>
    </div>
  {{/inline}}

{{/layouts/base}}
